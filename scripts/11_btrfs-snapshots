#! /bin/sh
set -e

prefix="/usr"
exec_prefix="${prefix}"
datarootdir="/usr/share"

. "${datarootdir}/grub/grub-mkconfig_lib"

export TEXTDOMAIN=grub
export TEXTDOMAINDIR="${datarootdir}/locale"

GRUBFS="$(stat -f --printf=%T / || true)"
BTRFS_MOUNT_POINT=/media/btrfs-root
MACHINE=`uname -m`
SNAPSHOT_DIR=manjaro_${MACHINE}_snapshots
SNAPSHOT_PATH=${BTRFS_MOUNT_POINT}/${SNAPSHOT_DIR}

# exit if / is not an btrfs filesystem
[ x"$GRUBFS" != xbtrfs ] && exit 0

# mount the root of the btrfs volume
mkdir -p ${BTRFS_MOUNT_POINT}
mount ${GRUB_DEVICE} ${BTRFS_MOUNT_POINT}

# exit if snapshot directory doesn't exist or is empty 
if [ ! -d ${SNAPSHOT_PATH} ]; then
   umount ${BTRFS_MOUNT_POINT}
   exit 0
fi   
if [ ! "$(ls -A ${SNAPSHOT_PATH})" ]; then
   umount ${BTRFS_MOUNT_POINT}
   exit 0
fi

linux_entry ()
{
  snap_ver="$1"
  version="$2"
  type="$3"
  args="$4"

  case $type in
	  fallback)
	      title="$(gettext_printf "%s (Kernel: %s - fallback initramfs)" "${snap_ver}" "${version}")" ;;
	  *)
	      title="$(gettext_printf "%s (Kernel: %s)" "${snap_ver}" "${version}")" ;;
      esac

      echo "menuentry '$(echo "$title" | grub_quote)' {" | sed "s/^/$submenu_indentation/"
      
  if [ x$type != xfallback ] ; then
      save_default_entry | sed -e "s/^/\t/"
  fi

  if [ "x$GRUB_GFXPAYLOAD_LINUX" != xtext ]; then
    echo "	load_video" | sed "s/^/$submenu_indentation/"
  fi
  
  echo "	set gfxpayload=$GRUB_GFXPAYLOAD_LINUX" | sed "s/^/$submenu_indentation/"
  echo "	insmod gzio" | sed "s/^/$submenu_indentation/"
  echo "	insmod part_msdos" | sed "s/^/$submenu_indentation/"
  echo "	insmod btrfs" | sed "s/^/$submenu_indentation/"
  echo "	search --no-floppy --fs-uuid --set=root ${GRUB_DEVICE_UUID}" | sed "s/^/$submenu_indentation/"

  message="$(gettext_printf "Loading Linux %s ..." "${version}")"
  sed "s/^/$submenu_indentation/" << EOF
	echo	'$message'
	linux	(\$root)${rel_dirname}/${basename} root=${linux_root_device_thisversion} rootflags=subvol=${SNAPSHOT_DIR}/$snap ro ${args}
EOF
  if test -n "${initrd}" ; then
    # TRANSLATORS: ramdisk isn't identifier. Should be translated.
    message="$(gettext_printf "Loading initial ramdisk ...")"
    sed "s/^/$submenu_indentation/" << EOF
	echo	'$message'
	initrd	(\$root)${rel_dirname}/${initrd}
EOF
  fi
  sed "s/^/$submenu_indentation/" << EOF
}
EOF
}

submenu_indentation="\t"

is_first_entry=false

echo "submenu 'System snapshots' {"

for snap in `ls -1 ${SNAPSHOT_PATH}` ; do
  list=`for i in ${SNAPSHOT_PATH}/$snap/boot/vmlinuz-* ; do
          if grub_file_is_not_garbage "$i" ; then echo -n "$i " ; fi
          done`
  while [ "x$list" != "x" ] ; do
    linux=`version_find_latest $list`
    basename=`basename $linux`
    dirname=`dirname $linux`
    rel_dirname=`make_system_path_relative_to_its_root $dirname`
    version=`echo $basename | sed -e "s,^[^0-9]*-,,g"`
    alt_version=`echo $version | sed -e "s,\.old$,,g"`
    gettext_printf "Found linux image: %s\n" "$basename in snapshot: $snap" >&2

    if echo "${basename}" | grep -q 'vmlinuz-linux' ; then
        version="`echo "${basename}" | sed -e 's,vmlinuz-linux,,g'`"

        if [ "x${version}" = "x" ] ; then
          version="core repo kernel"
        else
          version="`echo "${version}" | sed -e 's,-,,g'`"
          version="${version} kernel"
        fi
    fi

    initrd=
    initrd_manjaro="`echo "${basename}" | sed -e 's,vmlinuz,initramfs,g'`"
    if test -e "${dirname}/${initrd_manjaro}.img" ; then
      initrd="${initrd_manjaro}.img"
    fi

    if test -n "${initrd}" ; then
      gettext_printf "Found initrd image: %s\n" "${initrd} ($snap)" >&2
      linux_root_device_thisversion=${GRUB_DEVICE}
    fi

    linux_entry "$snap" "${version}" advanced \
              "${GRUB_CMDLINE_LINUX} ${GRUB_CMDLINE_LINUX_DEFAULT}"

    for i in "${initrd_manjaro}-fallback.img" ; do
      if test -e "${dirname}/${i}" ; then
        initrd="${i}"
        linux_entry "$snap" "${version}" fallback \
                    "${GRUB_CMDLINE_LINUX} ${GRUB_CMDLINE_LINUX_DEFAULT}"
        break
      fi
    done
    
    list=`echo $list | tr ' ' '\n' | grep -vx $linux | tr '\n' ' '`
    is_first_entry=false
  done
done

# If at least one kernel was found, then we need to
# add a closing '}' for the submenu command.
if [ x"$is_first_entry" != xtrue ]; then
  echo '}'
fi

# umount the the root of the btrfs volume
umount ${BTRFS_MOUNT_POINT}
